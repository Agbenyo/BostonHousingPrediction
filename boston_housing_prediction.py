# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Of22QfmSCGil8O3KzXOu6bPHN_UgFue0
"""

import pandas as pd

# Load the dataset
file_path = 'household_power_consumption.txt'  # Change this to the path where your file is located
df = pd.read_csv(file_path, sep=';', low_memory=False, parse_dates={'Datetime': ['Date', 'Time']},
                 na_values='?', infer_datetime_format=True)

# Display the first few rows of the dataset
print(df.head())

import pandas as pd

# Load the dataset
file_path = 'household_power_consumption.txt'  # Change this to the path where your file is located

# Read the dataset, specifying the Date and Time columns separately
df = pd.read_csv(file_path, sep=';', low_memory=False, na_values='?',
                 parse_dates={'Datetime': ['Date', 'Time']})

# Check the first few rows of the DataFrame
print(df.head())

# Drop rows with NaN values if necessary
df.dropna(inplace=True)

# Now you can select relevant features and the target variable
X = df[['Voltage', 'Global_intensity', 'Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3']]
y = df['Global_active_power']

# Proceed with the rest of the analysis as previously outlied...n



import pandas as pd
from sklearn.datasets import load_boston

# Load the Boston Housing dataset
boston = load_boston()
df = pd.DataFrame(boston.data, columns=boston.feature_names)
df['PRICE'] = boston.target  # Add the target variable

# Display the first few rows of the dataset
print(df.head())

import pandas as pd
import numpy as np

data_url = "http://lib.stat.cmu.edu/datasets/boston"
raw_df = pd.read_csv(data_url, sep="\s+", skiprows=22, header=None)
data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])
target = raw_df.values[1::2, 2]

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Boston Housing dataset
data_url = "http://lib.stat.cmu.edu/datasets/boston"
raw_df = pd.read_csv(data_url, sep="\s+", skiprows=22, header=None)
data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])
target = raw_df.values[1::2, 2]

# Create a DataFrame
# Note: Adjust column names according to dataset's original features
columns = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'PRICE']
df = pd.DataFrame(data, columns=columns)
df['PRICE'] = target  # Add the target variable

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Boston Housing dataset
data_url = "http://lib.stat.cmu.edu/datasets/boston"
raw_df = pd.read_csv(data_url, sep="\s+", skiprows=22, header=None)

# Combine feature data and target data
data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])
target = raw_df.values[1::2, 2]

# Create a DataFrame with 13 feature columns
columns = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT']
df = pd.DataFrame(data, columns=columns)

# Now add the target variable
df['PRICE'] = target  # Add the target variable

# Display the first few rows of the DataFrame
print(df.head())

# Check for missing values
print("Missing values in each column:")
print(df.isnull().sum())

# Feature selection and target variable
X = df.drop('PRICE', axis=1)  # Features
y = df['PRICE']                # Target variable

# Display the shapes of the feature set and target
print(f"Shape of features (X): {X.shape}")
print(f"Shape of target (y): {y.shape}")

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print(f"Shape of training set: {X_train.shape}, {y_train.shape}")
print(f"Shape of testing set: {X_test.shape}, {y_test.shape}")

# Create a linear regression model
model = LinearRegression()

# Fit the model on the training data
model.fit(X_train, y_train)

# Output the coefficients of the model
print("Model coefficients:")
for i, col in enumerate(X.columns):
    print(f"{col}: {model.coef_[i]}")

# Making predictions
y_pred = model.predict(X_test)

# Calculate Mean Squared Error and R-squared
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse:.2f}')
print(f'R-squared Score: {r2:.2f}')

# Plotting actual vs. predicted housing prices
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred, color='blue')
plt.xlabel('Actual Housing Prices')
plt.ylabel('Predicted Housing Prices')
plt.title('Actual vs. Predicted Housing Prices')
plt.plot([0, 50], [0, 50], 'r--')  # Diagonal line for reference
plt.xlim(0, 50)
plt.ylim(0, 50)
plt.show()

# Calculate and display the R-squared score in percentage
accuracy_percentage = r2 * 100
print(f'Model Accuracy: {accuracy_percentage:.2f}%')

# Example input features
input_data = {
    'CRIM': [0.1],
    'ZN': [20],
    'INDUS': [6],
    'CHAS': [0],
    'NOX': [0.4],
    'RM': [7.5],
    'AGE': [50],
    'DIS': [4.5],
    'RAD': [2],
    'TAX': [300],
    'PTRATIO': [15],
    'B': [390],
    'LSTAT': [5]
}

# Create a DataFrame from the input data
input_df = pd.DataFrame(input_data)

# Predict the price using the trained model
predicted_price = model.predict(input_df)

print(f'Predicted Housing Price: ${predicted_price[0]:,.2f}')

# Example input features
input_data = {
    'CRIM': [0.1],
    'ZN': [20],
    'INDUS': [6],
    'CHAS': [10],
    'NOX': [0.4],
    'RM': [7.5],
    'AGE': [50],
    'DIS': [4.5],
    'RAD': [2],
    'TAX': [300],
    'PTRATIO': [15],
    'B': [390],
    'LSTAT': [5]
}

# Create a DataFrame from the input data
input_df = pd.DataFrame(input_data)

# Predict the price using the trained model
predicted_price = model.predict(input_df)

print(f'Predicted Housing Price: ${predicted_price[0]:,.2f}')

# Example input features
input_data = {
    'CRIM': [0.1],
    'ZN': [20],
    'INDUS': [6],
    'CHAS': [10],
    'NOX': [0.4],
    'RM': [7.5],
    'AGE': [50],
    'DIS': [4.5],
    'RAD': [2],
    'TAX': [300],
    'PTRATIO': [15],
    'B': [390],
    'LSTAT': [5]
}

# Create a DataFrame from the input data
input_df = pd.DataFrame(input_data)

# Predict the price using the trained model
predicted_price = model.predict(input_df)

print(f'Predicted Housing Price: ${predicted_price[0]:,.2f}')

# Example input features
input_data = {
    'CRIM': [0.1],
    'ZN': [20],
    'INDUS': [6],
    'CHAS': [10],
    'NOX': [0.4],
    'RM': [7.5],
    'AGE': [50],
    'DIS': [4.5],
    'RAD': [2],
    'TAX': [300],
    'PTRATIO': [15],
    'B': [390],
    'LSTAT': [5]
}

# Create a DataFrame from the input data
input_df = pd.DataFrame(input_data)

# Predict the price using the trained model
predicted_price = model.predict(input_df)

print(f'Predicted Housing Price: ${predicted_price[0]:,.2f}')